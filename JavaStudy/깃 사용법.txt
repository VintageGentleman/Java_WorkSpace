
# Git

 - .git 폴더가 위치한 폴더 안의 모든 내용을 관리해주는 프로그램
 - .git 폴더를 추가한 곳을 Repository라고 부른다
 - .git 폴더 내부에는 레포지토리의 모든 정보를 기록한다 (변경 내역, 복원 지점 등)
 - .git 내부의 정보를 활용하여 해당 레포지토리를 예전 모습으로 되돌릴 수 있다
 - Git은 레포지토리 내부의 미세한 변화도 모두 알아채고 관리해준다
 - Eclipse에 내장된 Git을 사용할 수도 있다
 
# 새 레포지토리 만들기
 
 - 레포지토리 회면 : Windows -> Show View -> Others -> Git ...  
 - 새 프로젝트 생성 -> 새 프로젝트 우클릭 -> Team -> Share Project -> 경로 지정   
   
# Commit

 - 레포지토리의 변경 사항을 확정짓는 명령어
 - 커밋한 시점은 복원지점이 된다
 - 체크아웃을 통해 언제든지 원하는 커밋으로 레포지토리의 상태를 변경할 수 있다
 
# staged와 unstaged 상태

 - 가장 최근 커밋 이후 레포지토리 내부의 파일 중 변경된 파일들은 모두 unstaged 상태가 된다
 - unstaged 중에서 이번 커밋에 확정짓고 싶은 파일들만 선택하여 
   staged 상태로 변경 후 커밋을 진행할 수 있다
   (미완성 파일들은 커밋에 포함시키고 싶지 않은 경우에 유용하다)    

# History

 - 레포지토리의 변경 이력을 한눈에 볼 수 있는 기능
 - 레포지토리 우클릭 -> Show In -> History 
 - 파일을 클릭하면 해당 파일만의 History를 볼 수 있다
 - History에서 원하는 커밋으로 언제든 체크아웃 할 수 있다
   (체크아웃 시 최근 커밋 이후로 변경된 모든 사항은 보존되지 않는다)
 - 과거의 커밋으로 돌아간 상태에서 아무런 조치 없이 코드를 변경하면 
   현재의 커밋을 잃어버릴 수도 있으므로 주의해야 한다
   
# HEAD
 
 - 내가 현재 보고 있는 커밋을 HEAD라고 한다
 
# .gitignore

 - stage에 올리고 싶지 않은 파일 목록을 적어놓는 곳
 - 보통 IDE의 설정파일 또는 프로젝트의 리소스 경로 등을 적어놓는다  
 
# Branch

 - 하나의 레포지토리를 다양한 형태로 보관할 수 있는 기능
 - 브랜치가 있어야 하나의 커밋으로부터 여러 갈래의 커밋으로 갈라질 수 있다
 - 다른 커밋으로 변경하는 것도 체크아웃이지만 다른 브랜치로 변경하는 것도 체크아웃이다
 - 체크아웃시에는 커밋하지 않은 변경사항이 저장되지 않으므로 주의해야 한다  
 
# Merge

 - 한 브랜치에 다른 브랜치의 내용을 합치면서 새로운 커밋을 생성한다
 - 체크아웃 된 현재 HEAD에 히스토리에서 다른 브랜치를 우클릭 하여 합칠 수 있다
 - 두 브랜치를 합치는 도중 같은 파일의 같은 부분을 다른 내용으로 수정했다면
   충돌이 발생한다
 - 충돌이 발생하지 않는 경우에는 쉽게 합쳐지기 때문에
   자기가 맡은 부분 외의 수정은 다른 팀원들과의 협의하에 프로젝트를 진행해야 한다   
     
# Github

 - Git은 다른 컴퓨터에 존재하는 레포지토리(원격 레포지토리)를 다운받는 기능을 제공한다 
 - 팀 단위 작업을 하는 경우 하나의 레포지토리를 여러 로컬 레포지토리로 복사하며
   프로젝트를 진행하게 된다
 - Github는 레포지토리를 보관해주는 웹 사이트일 뿐이다 (깃 공식 홈페이지 아님)  
 
# push

 - 로컬 레포지토리의 특정 브랜치를 원격 레포지토리로 업데이트하는 것
 
# clone

 - 원격 레포지토리를 로컬에 그대로 다운로드 하는 것
 
# pull

 - 원격 레포지토리에 변경 사항이 있을 시 해당 변경 사항을 로컬에 반영하는 것
 - ex: 집에서 주말동안 작업한 결과물을 원격에 push한 후
       학원에서 pull하여 그대로 진행한다
 - ex: 종현이가 작업하던 브랜치를 다른 사람이 이어받아 작업해야 하는 경우
       나의 로컬 레포지토리에 종현이의 작업물을 pull하여 최신 상태로 만든 후 진행한다 
 - ex: 영준이가 만든 화면이 완성되어 로컬에서 마스터에 반영 후 push했다.
       다른 팀원들도 해당 업데이트를 반영하기 위해 마스터 브랜치를 pull해야 한다.
    
   
   
   